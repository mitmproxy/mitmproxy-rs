name: publish

on:
  push:
    tags:
      - '*'

permissions:
  contents: read

jobs:
  build-wheel:
    strategy:
      matrix:
        include:
          - os: windows-latest
          - os: ubuntu-latest
            args: --compatibility manylinux2014 --zig --sdist
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            args: --compatibility manylinux2014 --zig --target aarch64-unknown-linux-gnu
          - os: macos-latest
          - os: macos-latest
            target: aarch64-apple-darwin
            args: --universal2
    runs-on: ${{ matrix.os }}
    name: build-wheel (${{ matrix.os }}, ${{ matrix.target || 'x64' }})
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v4
      - run: rustup toolchain install stable --profile minimal
      - run: rustup default stable
      - if: matrix.target
        run: rustup target add ${{ matrix.target }}
      - run: rustup show
      - name: Install maturin[zig] from PyPI
        uses: install-pinned/maturin-with-zig@8f77fa13dfed13b9159a98076ee035f690aaa8f1  # 0.14.1
      - run: maturin build --release ${{ matrix.args }}
        working-directory: ./ffi
      - uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: target/wheels

  build-test-client:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - run: rustup toolchain install stable --profile minimal
      - run: rustup default stable
      - run: rustup show
      - run: cargo install --path wireguard-test-client --root wireguard-test-client/dist/${{ matrix.os }}/
      - uses: actions/upload-artifact@v3
        with:
          name: test-client-binaries
          path: wireguard-test-client/dist

  publish:
    runs-on: ubuntu-latest
    environment: pypi
    env:
      TWINE_USERNAME: __token__
      TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
    needs: [build-wheel, build-client]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist
      - run: sudo apt-get update
      - run: sudo apt-get install -y twine
      - run: |
          twine check dist/*
          twine upload dist/*
